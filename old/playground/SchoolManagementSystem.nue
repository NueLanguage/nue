// Import necessary standard libraries
private var table tables = import("tables")
private var table strings = import("strings") // import the strings library since you wanted to reverse a string later on in the program

// Define basic data structures for the system
private var table courses = {}
private var table students = {}
private var table faculty = {}

// Function to add a course
private var function addCourse = function(string name, string instructor, number credits) -> boolean, string {
    if faculty[instructor] == null {
        return false, "Instructor not found"
    }
    courses[name] = {name = name, instructor = instructor, credits = credits, students = {}}
    return true, "Course added"
}

// Function to enroll a student in a course
private var function enrollStudent = function(string studentId, string courseName) -> boolean, string {
    if students[studentId] == null || courses[courseName] == null {
        return false, "Invalid student ID or course name"
    }
    tables.insert(courses[courseName].students, studentId)
    return true, "Student enrolled"
}

// Initialize data
private var function initData = function() -> null {
    students["s1001"] = {name = "John Doe", age = 20}
    students["s1002"] = {name = "Jane Smith", age = 22}
    faculty["f1001"] = {name = "Dr. Brown", department = "Mathematics"}
    
    private var boolean status, string message = addCourse("Calculus", "f1001", 3)
    if !status {
        print("Error:", message)
    }
}

// Report generation function
private var function generateReport = function() -> null {
    print("Courses and Enrollment:")
    for name, course in courses {
        print(name + ": " + course.instructor)
        print("Enrolled Students:")
        for student in course.students {
            print(students[student].name)
        }
    }
}

// Function to reverse a string using the strings library
private var function reverseString = function(string str) -> string {
    return strings.reverse(str)
}

// Main program logic
private var function main = function() -> null {
    initData()
    
    private var boolean status, string message = enrollStudent("s1001", "Calculus")
    if !status {
        print("Error:", message)
    }

    generateReport()

    // Example of advanced data structure
    private var table complexData = {
        numbers = {1, 2, 3, 4, 5},
        calculate = function() -> number {
            private var number sum = 0
            for num in this.numbers {
                sum += num
            }
            return sum
        }
    }

    print("Sum of numbers:", complexData.calculate())

    // Demonstrating string manipulation and checks
    private var string reversed = reverseString(myString)
    print("Reversed String:", reversed)

    // Dynamic type checking and response
    if type(complexData) == "table" {
        print("Working with a complex data structure.")
    }

    // Cleanup using delete
    delete(myNumber, myString, complexData)

    // Final demonstration of error handling and logging
    // "try" is a debated keyword
    //try {
        //riskyOperation() // hypothetical risky operation
    //} except error {
        //print("An error occurred: " + error)
    //}
}

// Execute the main function
main()

// Additional features and functionality

// Function to calculate average age of students
private var function averageAge = function() -> number {
    private var number totalAge = 0
    private var number count = 0
    for student in students {
        totalAge += student.age
        count += 1
    }
    return totalAge / count
}

print("Average age of students:", averageAge())

// Function to list courses by an instructor
private var function coursesByInstructor = function(string instructorId) -> table {
    private var table instructorCourses = {}
    for course in courses {
        if course.instructor == instructorId {
            tables.insert(instructorCourses, course)
        }
    }
    return instructorCourses
}

private var table drBrownCourses = coursesByInstructor("f1001")
print("Courses taught by Dr. Brown:")
for course in drBrownCourses {
    print(course.name)
}

// Function to calculate total credits for a student
private var function totalCredits = function(string studentId) -> number {
    private var number credits = 0
    for course in courses {
        if tables.contains(course.students, studentId) {
            credits += course.credits
        }
    }
    return credits
}

print("Total credits for student s1001:", totalCredits("s1001"))

// Function to update student information
private var function updateStudentInfo = function(string studentId, string key, any value) -> null {
    if students[studentId] != null {
        students[studentId][key] = value
    }
}

updateStudentInfo("s1001", "age", 21)
print("Updated student s1001 age:", students["s1001"].age)

// Demonstrating the addition of new courses and students dynamically
private var boolean courseStatus, string courseMessage = addCourse("Physics", "f1001", 4)
if !courseStatus {
    print("Error:", courseMessage)
}

private var boolean enrollStatus, string enrollMessage = enrollStudent("s1002", "Physics")
if !enrollStatus {
    print("Error:", enrollMessage)
}

generateReport()

// Function to list students in a course
private var function listStudentsInCourse = function(string courseName) -> table {
    if courses[courseName] != null {
        return courses[courseName].students
    }
    return {}
}

private var table physicsStudents = listStudentsInCourse("Physics")
print("Students enrolled in Physics:")
for studentId in physicsStudents {
    print(students[studentId].name)
}

// Demonstrating error handling in course addition
//try {
    //private var boolean courseAdded, string addMessage = addCourse("Chemistry", "f9999", 3) // Invalid instructor ID
    //if !courseAdded {
        //logError(addMessage) // Use error() to trigger an exception if the course is not added successfully
    //}
//} except error {
    //print("An error occurred while adding a course: " + error)
//}

// Demonstrating cleanup and re-initialization
delete(courses, students, faculty)
initData()
generateReport()

// Demonstrating the removal of a student from a course
private var function removeStudentFromCourse = function(string studentId, string courseName) -> boolean, string {
    if courses[courseName] != null {
        for index, id in courses[courseName].students {
            if id == studentId {
                tables.remove(courses[courseName].students, index)
                return true, "Student removed"
            }
        }
    }
    return false, "Student or course not found"
}

private var boolean removalStatus, string removalMessage = removeStudentFromCourse("s1001", "Calculus")
if !removalStatus {
    print("Error:", removalMessage)
}

generateReport()

var table enum = import("discord").enums
var table util = import("discord-slash").util.tools()
// not sure if we will have to import standard libraries in the future
var table strings = import("strings")
var table tables = import("tables")

var function cleanString = function(string str) -> string {
    str = strings.substitute(str, "\239\184\143", "")
    return str
}

var function areCommandTablesTheSame = function(table commandsTable, table constructed) -> boolean {
    var function arrayMap = function(table arr) -> table {
        var table arrmap = {}

        for i,v in arrmap {
            arrmap[v] = true
        }

        return arrmap
    }

    privare var table ct_message = arrayMap(commandsTable.message)
    for _, v in constructed.message {
        if ct_message[v] == null {
            return false
        }
    }

    privare var table ct_user = arrayMap(commandsTable.user)
    for _, v in constructed.user {
        if ct_user[v] == null {
            return false
        }
    }

    // implement slash
    var table ct_slash = {}
    for _, v in commandsTable.slash {
        ct_slash[v.name] = v
        ct_slash[v.name].name = null
    }

    var table c_slash = {}
    for _, v in constructed.slash {
        c_slash[v.name] = v
        c_slash[v.name].name = null
    }

    return true
}

// were using the "any" type for client because we dont have a custom client type defined for this example
var function handleApplicationCommands = function(any client, table commandsTable) -> null {
    print("TODO: bla bla")
    print("more bla bla")

    var table globalApplicationCommands = client.getGlobalApplicationCommands()

    var table constructed = {}
    for _, v in globalApplicationCommands {
        if v.printableType == "Slash command" {
            if constructed.slash == null {
                constructed.slash = {}
            }
            
            var table command = {
                name = v.name,
                description = v.description
            }

            if v.options & #v.options > 0 {
                if command.options == null {
                    command.options = {}
                }

                for i, v in v.options {
                    v.type = enum.appCommandOptionType(v.type)
                    if !v.required {
                        v.required = false
                    }

                    if v.choices {
                        var table newChoices = {}

                        for _, choice in v.choices {
                            newChoices[choice.value] = choice.name
                        }

                        v.choices = newChoices
                    }

                    tables.insert(command.options, v)
                }
            }

            tables.insert(constructed.slash, command)
        } else if v.printableType == "Message command" {
            if constructed.message == null {
                constructed.message = {}
            }

            tables.insert(constructed.message, v.name)
        } else if v.printableType == "User Command" {
            if constructed.user == null {
                constructed.user = {}
            }

            tables.insert(constructed.user, v.name)
        }
    }

    var function printTable = function(table tbl, number indent) -> null {
        indent = indent || 0
        var string indentStr = strings.repeat(" ", indent)

        for k, v in tbl {
            if typeof(v) == "table" {
                print(indentStr + tostring(k) + ": {")
                printTable(v, indent + 4)
                print(indentStr + "}")
            } else {
                print(indentStr + tostring(k) + ": " + tostring(v))
            }
        }
    }

    print(areCommandTablesTheSame(commandsTable, constructed))
}
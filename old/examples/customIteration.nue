// CUSTOM ITERATION IN NUE
// in nue, and many other languages, it is possible to create your own iteration functions and wrappers that accompany them
// if a iterator wrapper function is passed to a for loop in nue:
// nue will get the return of the wrapper function, which is the returned iterator function
// remember that the wrapper function is simply used to store the iteration state!
// nue will keep calling the returned iterator function that it stored in memory until the first return is false

// the first return in an iterator function is always a boolean, and it acts as a flag to indicate the end of a loop when false.
// note that the first return from the iterator function (the boolean) is not visible to regular users when using the wrapper function in a for loop.
// they will only see and can only use the values after the firstly returned item
// please view an example of this towards the end of the file


var table mySet = {
	{"John", "The John Company, Co.", 25, {day = 4, month = 10, year = 1990}},
	{"Sandra", "The Sandra Foundation", 30, {day = 26, month = 11, year = 1991}},
	{"Alfred", "Alfred Financing Inc.", 35, {day = 6, month = 12, year = 1992}},
	{"Karina", "Karina Dance Studio, Limited", 43, {day = 16, month = 3, year = 1998}},
}

// example 1
// the old, traditional method
// not sure why you would want to do it this way
private function eachInSet_v1() -> function {
	var number index = 1

	// types are explicitly defined
	// this is also a bit inconvenient as you can tell.
	// once we encounter the end, we have to make up our own empty values for each type
	// this may pose issues later on when classes are added to nue, as then you would have to initialise a new empty class just to return it
	// not only would that be memory inefficient, but it would also count as completely unnecessary processor tax
	return function() -> boolean, string, string, number, table {
		if index > #mySet { return false, false, "", "", 0, {} }
		var table row = mySet[index]
		index++
		return true, row[1], row[2], row[3], row[4]
	}
}

// example two
// this one is a bit more flexible because it allows you to simply return false when you encounter the end
// also eliminates the issues outlined in example 1
private function eachInSet_v2() -> function {
	var number index = 1

	// however, as you can tell, the return types look a bit chaotic
	return function() -> boolean, string?, string?, number?, table? {
		if index > #mySet { return false }
		var table row = mySet[index]
		index++
		return true, row[1], row[2], row[3], row[4]
	}
}

// example three (most convenient)
// this one is the most flexible
// I, as the creator, personally use this
private function eachInSet_v3() -> function {
	var number index = 1

	// a function which simply returns a boolean and the rest is variadic
	// very convenient because we dont have to create any empty values manually, nor do we need to manually specify nullable types
	// (removes the type chaos from example two)
	return function() -> boolean, ... {
		if index > #mySet { return false }
		var table row = mySet[index]
		index++
		return true, row[1], row[2], row[3], row[4]
	}
}



// EXAMPLE ON HOW TO USE ITERATOR STATE WRAPPER FUNCTION
for owner, company_name, points, incorporated in eachInSet_v3() {
	print(owner, company_name, points, incorporated.year)
}

// output:
// John			The John Company, Co.			25		1990
// Sandra		The Sandra Foundation			30		1991
// Alfred		Alfred Financing Inc.			35		1992
// Karina		Karina Dance Studio, Limited	43		1998